static struct net_device_ops e1000_ops = {
    .open = e1000_open,
    .close = e1000_close,
    .transmit = e1000_transmit,
};

ハンドラテーブルはこんな感じ
ハンドラテーブルは関数へのポインタの配列
Linuxの場合は他にも、read,write,種々のioctlなどが登録されることが多い
ioctlはr/wとかの代表的な操作以外の諸々のハードウェア操作すべてを担当するシステムコール



--------------------------------------------------------------------------------------
pciの割り込み番号の話
pciコンフィギュレーション空間のinterrupt lineを見る
( pci_conf_read(&af, PCI_INTERRUPT_REG)を実行して、ハードウェアから直接読み取る)
そこで得た値を引数に、ioapicenableを実行する

実装ToDo
e1000_init

e1000_intr

e1000_open/close

e1000_tx_init/rx_init

tx/rx

transmitに対応するのがtx

--------------------------------------------------------------------------------------
v2pはいつ必要？ 
メモリマップドI/Oへ渡すときは物理アドレスに変換して渡す
確保の仕方は問題ではない


--------------------------------------------------------------------------------------
送信は毎回送信すべきデータが入っているメモリ領域をtx_ringに渡す
受信は受け取ったデータを一旦格納するためのメモリ領域をドライバ側で確保しておいて、毎回そこにデータを置く

